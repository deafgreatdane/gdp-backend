#!/usr/bin/perl
# take list of images and filename prefixes on stdin
# and prompt for which of the disks it can be found on
use lib "/GDP/lib";
use strict;
use File::Copy;
use DBI;
use GDP::OrderDb;

my $dataDir = "/GDP/data/cdArchives";

my $debug = shift(@ARGV) ;
my $dbh;
my $imageToDestinations = {};


my $destinationCount  = 0;
if ( $debug ) {
    $dataDir = "cdArchives";
    my (@row,$line, $imageNumber,$finalName);
    while ( $line = <> ) {
	chomp($line);
	next if /^\S+$/;
	@row = split(/\s+/,$line);
	print $row[0] ."\n";
	addImageToDestination($row[0],$row[1]);
    }
} else {
     $dbh = GDP::OrderDb::getDatabaseHandle();
    my $sth = $dbh->prepare(qq{select image_number,dest_file from cart_consolidate});
    $sth->execute();

    my (@row,$imageNumber,$finalName);
    while( @row = $sth->fetchrow_array()) {
	my $path = {};
	my( $imageNumber,$finalName) = @row;
	if ( ! $imageNumber ) {
	    next;
	}
	addImageToDestination($imageNumber,$finalName);
    }
}

sub addImageToDestination {
    my $imageNumber = shift;
    my $destinationName = shift;
    push (@{$imageToDestinations->{$imageNumber}}, $destinationName);
    $destinationCount++;
}

print "will do " . scalar( keys(%{$imageToDestinations})). " unique sources items to $destinationCount destinations\n";

#################### figure which disks have which images
# multiple discs may have the same image. 
my $discToSourceFiles = {};
my $sourceFileToImageNumber = {};

my $imageNumber;
for $imageNumber ( keys(%{$imageToDestinations})) {
    my @matches = `grep $imageNumber $dataDir/*`;
    if ( ! scalar(@matches)) {
	print "$imageNumber not found on any disc, do it later\n";
	next;
    }
    my $findLine;
    foreach $findLine (@matches) {
	chop($findLine);
	my ($sourceDisc,$fileName) = split(/:/,$findLine);
	push( @{$discToSourceFiles->{$sourceDisc}},$fileName);
	$sourceFileToImageNumber->{$fileName} = $imageNumber;
    }
}
print "found at most ". scalar( keys(%{$discToSourceFiles})) . " discs\n";

#################### run down the discs
my $sourceDisc;
my @sortedList = sort(keys(%{$discToSourceFiles}));
print "Fetch discs: \n" . join("\n  ",@sortedList) . "\n";
foreach $sourceDisc ( @sortedList ) {
    my $sourceFileName;
    foreach $sourceFileName ( @{$discToSourceFiles->{$sourceDisc}}) {
	my $imageNumber = $sourceFileToImageNumber->{$sourceFileName};
	my $destinationName;
	foreach  $destinationName (@{$imageToDestinations->{$imageNumber}}) {
	    #print "i wanna $imageNumber to $destinationName from $sourceFileName\n";
	    $sourceFileName =~ m:(\.[^.]*)$:;
	    my $extension = $1;
	    my $finalName = $destinationName . $extension;
	    if ( -e $finalName ) {
		# already did this one.
		print "already have $finalName for $imageNumber\n";
	    } else {
		assertDisc($sourceFileName,$sourceDisc);
		print "copy $sourceFileName $finalName\n";
		copy($sourceFileName,$finalName);
	    }
	    cleanupRow($imageNumber,$destinationName);

	}
	# now that we've done this imageNumber on this disc,
	# we don't want to do it again on another disc
	$imageToDestinations->{$imageNumber} = [];

    }
}
####################################

sub assertDisc {
    my $sourceFileName = shift;
    my $sourceDisc = shift;
    return if $debug;
    while ( ! -e $sourceFileName ) {
	print "Please insert $sourceDisc\n";
	#if ( isCdMounted() ) {
	    `drutil eject`;
	#}
	waitForCd();
    }	
}



sub cleanupRow {
    my $imageNumber = shift;
    my $finalName = shift;
    if ( ! $debug ) {
	my $sth = $dbh->prepare(qq{delete from cart_consolidate where image_number = '$imageNumber' and dest_file = '$finalName'});
	$sth->execute();
    }
}

sub waitForCd {
    while ( ! isCdMounted() ) {
	sleep(1);
    }
    sleep(2);
}

sub isCdMounted {
    my $found = 0;
    opendir(DIR, "/Volumes");
    my $fileName;
    while($fileName = readdir(DIR)) {
	next if $fileName =~ /^\./;
	next if $fileName =~ /HD/;
	$found = 1;
    }
    closedir(DIR);
    return $found;
}

