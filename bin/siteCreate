#!/usr/bin/perl
use lib "/GDP/lib";
use strict;
use File::Path;
use File::Spec;
use File::Copy;
use GDP::Paths;
use GDP::Expando;

no  strict 'refs';
my($baseDir);
my($includeDir);
my($outDir);


$baseDir = "/";
#$outDir = "/Users/johnsonb/Sites/decoration/out";
$outDir = "/Users/johnsonb/Sites/newgdp/out";

my (@files);
if ( ! @ARGV ) {
    @files = findFiles($baseDir);
} else {
    @files = @ARGV;
}
processList(@files);
exit(0);

#####################################
#package GDP;
sub processList {
    my(@todo) = @_;
    my($fileName);
    foreach $fileName (@todo) {
	if ( ! -d GDP::Paths::getDirectoryOf("$outDir/$fileName")) {
	    print STDOUT "################ new dir $fileName\n";	    
	    mkpath(GDP::Paths::getDirectoryOf("$outDir/$fileName")) || warn("could not create parent $!");
	}
	if ( -d ".$fileName" ) {
	    print STDOUT "################ digging $fileName\n";	    
	    processList(findFiles($fileName));
	} elsif ( $fileName =~ m:\.html: ) {
	    print STDOUT "################ doing $fileName\n";	    
	    my($outFile) = "$outDir$fileName";
	    my(%varSet) ;
	    $varSet{'relativeTo'} = $fileName;
	    $varSet{'modDate'} = expandDate( (stat(".$fileName"))[9]);
	    writeTo("$outDir$fileName",expandFile(\%varSet,".$fileName"));
	} elsif ( $fileName =~ m:\.(gif|jpg):i ) {
	    if ( ! -e "$outDir$fileName") {
		print STDOUT "################ copy $fileName\n";	    
		copy(".$fileName","$outDir$fileName");
	    } else {
		#print STDOUT "################ skip $fileName\n";	    
	    }
	} elsif ( $fileName =~ m:\.(css):i ) {
	    print STDOUT "################ copy $fileName\n";	    
	    copy(".$fileName","$outDir$fileName");
	}
    }
}
sub expandFile {
    my ($varSet,$fileName) = @_;
    my $contents = readFile($fileName);
    my $retval = makeRelativeUrls($varSet->{'relativeTo'},$contents);
    $retval = expandString($varSet,$retval);

    #print "### done with $fileName\n";
    return $retval;
}
sub expandString {
    my ($varSet,$contents) = @_;
    # do this last, so that the url expansion only happens once
    $contents =~ s/<%\s*(.*)\s*%>/expand($varSet,$1)/ge;
    return $contents;
}
sub makeRelativeUrls {
    my ($relativeTo,$contents) = @_;
    #print "rearranging relative to $relativeTo\n";
    $contents =~ s/href="([^"]*)"/expandRelativeAttribute($relativeTo,'href',$1)/gie;
    $contents =~ s/background="([^"]*)"/expandRelativeAttribute($relativeTo,'background',$1)/gie;
    $contents =~ s/src="([^"]*)"/expandRelativeAttribute($relativeTo,'src',$1)/gie;
    return $contents;
}
sub expandRelativeAttribute {
    my ($relativeTo,$attr,$string) = @_;
    my ( $retval) = GDP::Paths::getRelative($relativeTo,$string); 
    #print STDOUT "rel attribute: $attr = $string ++ $retval \n";
    return "$attr=\"" . $retval . "\"";
}

sub makeAbsoluteUrls {
    my ($relativeTo,$contents) = @_;
    #print "flattening relative to $relativeTo\n";
    $contents =~ s/href="([^"]*)"/expandAbsoluteAttribute($relativeTo,'href',$1)/gie;
    $contents =~ s/background="([^"]*)"/expandAbsoluteAttribute($relativeTo,'background',$1)/gie;
    $contents =~ s/src="([^"]*)"/expandAbsoluteAttribute($relativeTo,'src',$1)/gie;
    return $contents;
}
sub expandAbsoluteAttribute {
    my ($from,$attr,$string) = @_;
    my ( $retval) = GDP::Paths::getAbsolute($from,$string); 
    #print STDOUT "abs attribute: $attr = $string ++ $retval \n";
    return "$attr=\"" . $retval . "\"";
}

sub trim {
    my ($string) = @_;
    $string =~ s:^\s*::;
    $string =~ s:\s*$::;
    return $string;
}
sub expand {
    my ($varSet, $string) = @_;
    $string = trim($string);
    if ( $string =~ m:(\w+)\(: ) {
	my ($func,@args) = GDP::Expando::parseFunction($string);
	
	my ($arg,@evalArgs);
	foreach $arg (@args) {
	    push(@evalArgs,expand($varSet,$arg));
	}
	if ( $func eq "include" ) { 
	    expandInclude($varSet,$evalArgs[0]);
	} elsif ( $func eq "set" ) {
	    $varSet->{$evalArgs[0]} = $evalArgs[1];
	    return "";
	} elsif ( $func eq "default" ) {
	    if ( ! $varSet->{$evalArgs[0]}) {
		$varSet->{$evalArgs[0]} = $evalArgs[1];
	    }
	    return "";
	} elsif ( $func eq "date" ) {
	    return expandDate();
	} else {
	    print "function: $func with " . join(",",@evalArgs) . "\n";
	}
    } elsif ( $string =~ m:\$: ) {
	my ($varName) = $';#';
	return $varSet->{$varName};
    } elsif ( $string =~ m:^": ) {
	$string =~ s:^"::;
	$string =~ s:"$::;
	return $string;
    } else {
	return $string;
    }
}
sub expandDate {
    my ($t ) = shift;
    if ( ! $t ) {
	$t = time;
    }
    return ((localtime($t))[4]+1) . "/" . (localtime($t))[3] . "/" . (1900 + (localtime($t))[5]) ;
}
sub expandOld {
    my ($varSet, $string) = @_;
    $string = trim($string);
    if ( $string =~ m:^include\(([^\)]*)\)$: ) {
	return expandInclude($varSet,expand($varSet,$1));
    } elsif ( $string =~ m:^"(.*)"$: ) {
	# expand strings later
	return $1;
    } elsif ( $string =~ m:^\$(.*): ) {
	#print "expand(string): " . join(keys(%$varSet),",") . "-|-\n";
	return "var($1) == " . $varSet->{$1};
    } else {
	return "<i>$string</i>";
    }
}
sub findFiles { 
    my $sourceDir = shift; 
    my @retval ;
    my ($readFrom) = $sourceDir; 
    my($source);
    # add a trailing slash to the sourcedir, to make sure
    if ( $sourceDir ne "" && $sourceDir !~ m:/$:) {
	$sourceDir .= "/";
    }
    opendir(DIR,".$readFrom"); 
    while( $source = readdir(DIR)) { 
	next if $source =~ m/^_/; 
	next if $source =~ m:^\.:;
	next if $source =~ m:~$:;
	push(@retval, "$sourceDir$source");
    }
    closedir(DIR);
    return @retval;
}

sub expandInclude {
    my($varSet,$includeName) = @_;

    # keep a copy of the current relative, since we're going to bury down
    my $currentFile = $varSet->{'relativeTo'};
    $includeName = GDP::Paths::getAbsolute($currentFile,$includeName);
    $varSet->{'relativeTo'} = $includeName;
    #print STDOUT "### want to include $includeName\n";
    my $retval = expandFile($varSet,$includeName);
    $retval = makeAbsoluteUrls($includeName,$retval);
    $retval = makeRelativeUrls($currentFile,$retval);
    $retval =~ getInnerHtml("body",$retval);
    #put the relativeTo back.
    $varSet->{'relativeTo'} = $currentFile;
    return $retval;
}
sub getInnerHtml {
    my ($tagName,$content) = @_;
    if ( $content =~ s:<$tagName::i ) {
	$content =~ s:[^>]*>::;
	$content =~ s:</$tagName>.*::i;
    }
    return $content;
}

sub readFile {
    my ($fileName) = @_;
    if ( $fileName =~ m:^/: ) {
	$fileName = ".$fileName";
    }
    if ( ! open(IN,"<$fileName")) {
	print STDOUT "could not read $fileName";
	return "readFile($fileName) not found";
    }
    my($retval) = "";
    while(<IN>) {
	$retval .= $_;
    }
    return $retval;
}
sub writeTo {
    my ($fileName,$contents) = @_;
    open(OUT,">$fileName") || die "could not write to $fileName";
    print OUT $contents;
    close OUT;
}

0;
